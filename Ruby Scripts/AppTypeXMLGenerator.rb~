
$newLine = "\r\n"


def is_i? (string_to_check)
	return (string_to_check.is_a? String) && /\A\d+\z/.match(string_to_check)
end


def getRelatedAppsAttributes(str)
	attributes = 'DisplayableRelatedAppTypes="" DisplayRelatedParentApp="yes" DisplayRelatedAppsByAppPart="" '
	
	if str.nil? 
		return attributes
	elsf str.include? "parts"
		attributes.gsub! 'DisplayRelatedAppsByAppPart=""', 'DisplayRelatedAppsByAppPart="yes"' 
	end
	
	relatedAppTypes = ""

	#split the string with comma
	a =str.split(",").each do |item.strip.chomp|
		if is_i? item
			relatedAppTypes << item + ","
puts relatedAppTypes
		end
	end 
puts relatedAppTypes
len=relatedAppTypes.length 
puts len
	#replace the appTypes attribute
	attributes.gsub! 'DisplayableRelatedAppTypes=""', 'DisplayableRelatedAppTypes="' + relatedAppTypes[0..len-1] + '"'

	return attributes
end


def getDocTypeXmlNode(line, receivedCutoffDate)

	#replace 'NO' with '-'
	line.gsub!('NO', '-')

	#split string with '-'
	arr = line.split('-')

	#parse 3rd element in the array for related apps configuration
	relatedAppsAttr = getRelatedAppsAttributes(arr[2])

	#p arr

	return '<Type TKey="' + arr[0].strip.chomp + '" Description="' + arr[1].strip.chomp + '" ATDISDesc="" ReceivedDateCutOff="' + receivedCutoffDate + '" ' + relatedAppsAttr + ' />' + $newLine
end

def getTypeNodes(fileToReadFrom, receivedCutoffDate)

	#read from file
	file = File.open(fileToReadFrom, 'r')
	$result = ""

	while(line = file.gets)
		text = line.strip.chomp
		text ||= ""

		if(text.length > 0)
			$result << getDocTypeXmlNode(line, receivedCutoffDate)
		end
	end

	file.close
end


def writeXmlToFile(file)

	#write xml to file
	file = File.open(file, 'w')

	xmlHeader = '<?xml version="1.0" standalone="yes"?>' + $newLine
	xmlContent = '<ApplicationTypes>' + $result + '</ApplicationTypes>'
	file.write(xmlHeader + xmlContent)
	file.close

end


typeNodes = getTypeNodes('docType&Desc.txt', "")
writeXmlToFile('docType&Desc.xml')

#puts $result
